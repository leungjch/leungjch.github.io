{"componentChunkName":"component---src-templates-note-post-js","path":"/design-recipe/","result":{"data":{"markdownRemark":{"html":"<p>The design recipe is an integral part of HtDP. It's a systematic approach to developing functions that are well documented and tested. </p>\n<h2>Components of the design recipe</h2>\n<ol>\n<li><strong>Purpose</strong>: Describe what the function computes.</li>\n<li><strong>Contract</strong>: Describe what arguments the function consumes and the type of value it produces.</li>\n<li><strong>Examples</strong>: Illustrate the typical use of the function.</li>\n<li><strong>Definition</strong>: The actual code for the function.</li>\n<li><strong>Tests</strong>: A set of function applications and their expected values.</li>\n</ol>\n<h2>Recommended order of following the Design Recipe</h2>\n<ol>\n<li>Write a draft of the <strong>Purpose</strong></li>\n<li>Write <strong>Examples</strong> (by hand, then code)</li>\n<li>Write Definition <strong>Header</strong> and <strong>Contract</strong></li>\n<li>Finalize the purpose with parameter names</li>\n<li>Write <strong>Definition</strong> body</li>\n<li>Write <strong>Tests</strong></li>\n</ol>\n<h2>Using the Design Recipe</h2>\n<pre><code class=\"language-scheme\">;; [PURPOSE] (sum-of-squares n1 n2) produces the sum of squares of n1 and n2.\n;; [EXAMPLE] Examples:\n(check-expect (sum-of-squares 3 4) 25)\n;; [HEADER AND CONTRACT] sum-of-squares: Num Num â†’ Num \n;; [DEFINITION]\n(define (sum-of-squares n1 n2)\n(+ (sqr n1) (sqr n2)))\n;; [TESTS] Tests\n(check-expect (sum-of-squares 0 0) 0)\n(check-expect (sum-of-squares -2 7) 53)\n(check-expect (sum-of-squares 0 2.5) 6.25)\n</code></pre>\n<h1>Data Definitions</h1>\n<p>A data definition specifies how to represent a piece of information in the real world as data in a program. It also provides documentation on how to interpret the data back into information. It also provides a template and examples for how to operate on the data.</p>\n<p>For example, consider modelling a traffic light. Here is a function that provides the next colour in a traffic light:</p>\n<pre><code class=\"language-scheme\">(define (next-color c)\n    (cond \n        [(= c 0) 2])\n        [(= c 1) 1])\n        [(= c 2) 0])))\n</code></pre>\n<p>Although we can understand what the function does, we do not understand the data that it is acting on. What is <code>c</code>? Can c be 3 or more, or negative? </p>\n<p>The problem of ambiguity can be solved by providing a data definition:</p>\n<pre><code class=\"language-scheme\">;; TLColor is one of:\n;; - 0\n;; - 1\n;; - 2\n;; interpretation: the color of a traffic light: 0 is red, 1 yellow, 2 green\n</code></pre>\n<p>We now see that <code>c</code> must be a <code>TLColor</code> and therefore can only be 0, 1, or 2. We also know that <code>c</code> represents the color of a traffic light, even if it maps to a natural number.</p>","frontmatter":{"title":"HTDP2: The Design Recipe"}}},"pageContext":{"slug":"/design-recipe/"}},"staticQueryHashes":["3181172606"]}